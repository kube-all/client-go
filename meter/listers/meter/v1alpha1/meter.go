/*
Copyright 2022 The kubeall.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-all/api/meter/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeterLister helps list Meters.
// All objects returned here must be treated as read-only.
type MeterLister interface {
	// List lists all Meters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Meter, err error)
	// Meters returns an object that can list and get Meters.
	Meters(namespace string) MeterNamespaceLister
	MeterListerExpansion
}

// meterLister implements the MeterLister interface.
type meterLister struct {
	indexer cache.Indexer
}

// NewMeterLister returns a new MeterLister.
func NewMeterLister(indexer cache.Indexer) MeterLister {
	return &meterLister{indexer: indexer}
}

// List lists all Meters in the indexer.
func (s *meterLister) List(selector labels.Selector) (ret []*v1alpha1.Meter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Meter))
	})
	return ret, err
}

// Meters returns an object that can list and get Meters.
func (s *meterLister) Meters(namespace string) MeterNamespaceLister {
	return meterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeterNamespaceLister helps list and get Meters.
// All objects returned here must be treated as read-only.
type MeterNamespaceLister interface {
	// List lists all Meters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Meter, err error)
	// Get retrieves the Meter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Meter, error)
	MeterNamespaceListerExpansion
}

// meterNamespaceLister implements the MeterNamespaceLister
// interface.
type meterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Meters in the indexer for a given namespace.
func (s meterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Meter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Meter))
	})
	return ret, err
}

// Get retrieves the Meter from the indexer for a given namespace and name.
func (s meterNamespaceLister) Get(name string) (*v1alpha1.Meter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meter"), name)
	}
	return obj.(*v1alpha1.Meter), nil
}
